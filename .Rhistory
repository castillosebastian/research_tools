A= matrix(c(1,2,-1,1,0,1,3,1,0,0,2,0,0,0,1,-1), nrow=4,ncol=4,byrow=T)#Ingresaunamatrizde4x4
A#Muestralamatriz
eigen(A)
source('~/research_tools/utn_analisis_inteligente_datos/Unidad2_analisis_componente_principal.R', echo=TRUE)
source('~/research_tools/utn_analisis_inteligente_datos/Unidad2_analisis_componente_principal.R', echo=TRUE)
source('~/research_tools/utn_analisis_inteligente_datos/Unidad2_analisis_componente_principal.R', echo=TRUE)
source('~/research_tools/utn_analisis_inteligente_datos/Unidad2_analisis_componente_principal.R', echo=TRUE)
source('~/research_tools/utn_analisis_inteligente_datos/Unidad2_analisis_componente_principal.R', echo=TRUE)
library(Facto)
library(broom)
source('~/research_tools/utn_analisis_inteligente_datos/Unidad2_analisis_componente_principal.R', echo=TRUE)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
df <- list()
# https://rpubs.com/ercalel/593452
# https://bookdown.org/jsalinas/tecnicas_multivariadas/acp.html
df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
#df <- df
df = df_raw %>% dplyr::select(-Nadador)
df
df
df_raw
kable(summary(df))
skim(df)
df_pca_corr =  prcomp(df, center = TRUE, scale. = T)
df_pca_corr
names(df_pca_corr)
df_pca_corr$center
df_pca_corr$scale
df_pca_corr$rotation
df_pca_corr$rotation[[1]]
df_pca_corr$rotation[,1]
df_pca_corr$x
df
kable(df)
kable(df_raw)
biplot(x = df_pca_corr, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
summary(df_pca_corr)
df_pca_corr$sdev^2
df_pca_corr$sdev^2 / sum(df_pca_corr$sdev^2)
prop_varianza = df_pca_corr$sdev^2 / sum(df_pca_corr$sdev^2)
prop_varianza
prop_varianza = df_pca_corr$sdev^2 / sum(df_pca_corr$sdev^2)
ggplot(data = data.frame(prop_varianza, pc = 1:length(prop_varianza)),
aes(x = pc, y = prop_varianza)) +
geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Componente principal",
y = "Prop. de varianza explicada")
prop_varianza = df_pca_corr$sdev^2 / sum(df_pca_corr$sdev^2)
ggplot(data = data.frame(prop_varianza, pc = 1:length(prop_varianza)),
aes(x = pc, y = prop_varianza)) +
geom_col(width = 0.3) +
geom_text() +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Componente principal",
y = "Prop. de varianza explicada")
prop_varianza = df_pca_corr$sdev^2 / sum(df_pca_corr$sdev^2)
ggplot(data = data.frame(prop_varianza, pc = 1:length(prop_varianza)),
aes(x = pc, y = prop_varianza)) +
geom_col(width = 0.3) +
geom_text(label = prop_varianza) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Componente principal",
y = "Prop. de varianza explicada")
prop_varianza = df_pca_corr$sdev^2 / sum(df_pca_corr$sdev^2)
ggplot(data = data.frame(prop_varianza, pc = 1:length(prop_varianza)),
aes(x = pc, y = prop_varianza)) +
geom_col(width = 0.3) +
geom_text(label = round(prop_varianza * 100, digits = 1)) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Componente principal",
y = "Prop. de varianza explicada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
theme_bw() +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1)) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1), hjust =1) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1), vjust =1) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1), vjust =-1.5) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1), vjust =-1) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1), vjust =-.5) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
# Producto matricial
eigen <- eigen(df_pca_corr)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
eigen(nadadores)
# Importar a mano pegando portapales
df = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
df =  matrix(df, nrow = 3, byrow = T)
df
df <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
df
df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
#df <- df
df = df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
df
df_pca_corr %>%
tidy(matrix = "eigenvalues")
eigen(df)
pca %>%
tidy(matrix = "eigenvalues")
matriz_corr <- corr(df)
matriz_cov <- cov(df)
eigen(matriz_cov)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
df <- list()
# https://rpubs.com/ercalel/593452
# https://bookdown.org/jsalinas/tecnicas_multivariadas/acp.html
# Import matrix
m = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
m =  matrix(m, nrow = 3, byrow = T)
m
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
df <- list()
# https://rpubs.com/ercalel/593452
# https://bookdown.org/jsalinas/tecnicas_multivariadas/acp.html
df
# Importar a mano pegando portapales
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
df$practica1 <- temp
df$practica2 <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
# parametro para eliminar columna!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
df$practica3 <- df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
df = temp
skim(df)
matriz_cov <- cov(df)
pca =  prcomp(df, center = TRUE, scale. = T)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
df = temp
# Nadadores
df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
df$practica3 <- df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
df$practica1 <- temp
pca =  prcomp(df, center = TRUE, scale. = T)
df
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
df = temp
df
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(df, nrow = 3, byrow = T)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(temp, nrow = 3, byrow = T)
df = temp
# Nadadores
# df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
# df$practica3 <- df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
#
# df$practica1 <- temp
pca =  prcomp(df, center = TRUE, scale. = T)
pca$center
pca$scale
pca$x
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
summary(pca)
matriz_cov <- cov(df)
eigen(matriz_cov)
pca =  prcomp(df, center = TRUE, scale. = T)
pca$center
pca$scale
df
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(temp, nrow = 3, byrow = T)
df = temp
# Nadadores
# df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
# df$practica3 <- df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
#
# df$practica1 <- temp
df <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/chalets.xlsx")
setwd("~/research_tools")
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(temp, nrow = 3, byrow = T)
df = temp
# Nadadores
# df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
# df$practica3 <- df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
#
# df$practica1 <- temp
df <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/chalets.xlsx")
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# Importar practica 1
temp = as.integer(strsplit(as.character(c("3 1 1 1 3 1 1 1 5")), " ")[[1]])
temp =  matrix(temp, nrow = 3, byrow = T)
df = temp
# Nadadores
# df_raw <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/nadadores.xlsx")
# df$practica3 <- df_raw %>% dplyr::select(-Nadador)  # quito columna nombre individuos
#
# df$practica1 <- temp
df <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/chalets.xlsx")
skim(df)
df
matriz_cov <- cov(df)
eigen(matriz_cov)
pca =  prcomp(df, center = TRUE, scale. = T)
pca$center
pca$scale
pca$rotation
pca$x
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
summary(pca)
pca$sdev^2
prop_varianza = pca$sdev^2 / sum(pca$sdev^2)
ggplot(data = data.frame(prop_varianza, pc = 1:length(prop_varianza)),
aes(x = pc, y = prop_varianza)) +
geom_col(width = 0.3) +
geom_text(label = round(prop_varianza * 100, digits = 1)) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Componente principal",
y = "Prop. de varianza explicada")
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = 1:length(prop_varianza_acum)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_text(label = round(prop_varianza_acum * 100, digits = 1), vjust =-.5) +
labs(x = "Componente principal",
y = "Prop. varianza explicada acumulada")
matriz_cov
matriz_corr <- corr(df)
names(pca)
x
pca$x
kable(df)
knit_with_parameters('~/research_tools/utn_analisis_inteligente_datos/toolpca.Rmd')
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
pca$rotation
pca$x
pca_nci$sdev
pca$sdev
pca$sdev
pca$sdev^2
summary(pca)
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
DataExplorer::plot_prcomp(df)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# https://fhernanb.github.io/Manual-de-R/ph.html
prop.test(x=174, n=200, p=0.9, alternative='less',
conf.level=0.95, correct=FALSE)
prop.test(x=174, n=200, p=0.9, alternative='less',
conf.level=0.95, correct=FALSE)
prop.test(x=174, n=200, p=0.95, alternative='less',
conf.level=0.95, correct=FALSE)
prop.test(x=174, n=200, p=0.9, alternative='less',
conf.level=0.95, correct=FALSE)
prop.test(x=174, n=200, p=0.99, alternative='less',
conf.level=0.95, correct=FALSE)
prop.test(x=174, n=200, p=0.90, alternative='less',
conf.level=0.95, correct=FALSE)
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
knitr::include_graphics('independencia_homogeneidad.png')
df <- tribble(
~renta, ~bueno, ~malo, ~regular,
'Bajo', 75,40,35,
'Medio', 60,50,70,
'Alto', 20,40,30,
'Muy Alto', 15,40,25)
df
df <- tribble(
~renta, ~bueno, ~malo, ~regular,
'Bajo', 75,40,35,
'Medio', 60,50,70,
'Alto', 20,40,30,
'Muy Alto', 15,40,25)
df <- rownames(1)
df
df <- tribble(
~renta, ~bueno, ~malo, ~regular,
'Bajo', 75,40,35,
'Medio', 60,50,70,
'Alto', 20,40,30,
'Muy Alto', 15,40,25)
df <- column_to_rownames(renta)
df <- tribble(
~renta, ~bueno, ~malo, ~regular,
'Bajo', 75,40,35,
'Medio', 60,50,70,
'Alto', 20,40,30,
'Muy Alto', 15,40,25)
df <- column_to_rownames(var = 'renta')
df <- tribble(
~renta, ~bueno, ~malo, ~regular,
'Bajo', 75,40,35,
'Medio', 60,50,70,
'Alto', 20,40,30,
'Muy Alto', 15,40,25)
df <- df %>% column_to_rownames(var = 'renta')
df
# Para graficarlo con % fila (perifles fila)
prop.table(df,margin=1)
# Para graficarlo con % fila (perifles fila)
prop.table(as.table(df),margin=1)
# Para graficarlo con % fila (perifles fila)
prop.table(as.matrix(df),margin=1)
# Para graficarlo con % fila (perifles fila)
df_prop = prop.table(as.matrix(df),margin=1)
df_prop
balloonplot(t(df_prop),
main ="Gráfico correspondencia",
label = F, cum.margins=F,
label.lines=F, show.margins = FALSE)
library(ggplot2)
balloonplot(t(df_prop),
main ="Gráfico correspondencia",
label = F, cum.margins=F,
label.lines=F, show.margins = FALSE)
library(ggplots)
install.packages("gplots")
install.packages("caTools")
install.packages("bitops")
install.packages("caTools")
install.packages("gplots")
library(gplots)
balloonplot(t(df_prop),
main ="Gráfico correspondencia",
label = F, cum.margins=F,
label.lines=F, show.margins = FALSE)
balloonplot(t(df_prop),
main ="Gráfico correspondencia",
xlab= 'Opinion', ylab = 'renta',
label = F, cum.margins=F,
label.lines=F, show.margins = FALSE)
# 1. convert the data as a table
dt <- as.table(as.matrix(df))
# 2. Graph
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
prueba <- chisq.test(df)
prueba
# Para graficarlo con % columna (perifles fila)
df_prop = prop.table(as.matrix(df),margin=2)
df_prop
install.packages("FactoMineR")
install.packages("nloptr")
# Observed counts
prueba$observed
# Expected counts
round(prueba$expected,2)
# Cells with the highest absolute standardized residuals contribute the most to the total Chi-square score.
round(prueba$residuals, 3)
library(corrplot)
corrplot(prueba$residuals, is.cor = FALSE)
# 1. convert the data as a table
dt <- as.table(as.matrix(df))
# 2. Graph
balloonplot(t(dt), main ="Grafico", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
# Contibution in percentage (%)
contrib <- 100*prueba$residuals^2/prueba$statistic
round(contrib, 3)
# Visualize the contribution
corrplot(contrib, is.cor = FALSE)
# printing the p-value
chisq$p.value
# printing the p-value
prueba$p.value
prueba$stdres
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("nloptr")
install.packages("nloptr")
install.packages("FactoMineR")
install.packages("factoextra")
datos <- data.frame( sujeto = c("No alérgico", "No alérgico", "No alérgico",
"No alérgico", "alérgico", "No alérgico",
"No alérgico", "alérgico", "alérgico",
"No alérgico", "alérgico", "alérgico",
"alérgico", "alérgico", "alérgico",
"No alérgico", "No alérgico", "No alérgico",
"No alérgico", "alérgico", "alérgico",
"alérgico", "alérgico", "No alérgico",
"alérgico", "No alérgico", "No alérgico",
"alérgico","alérgico", "alérgico"),
mutacion = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE,
FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE,
TRUE, FALSE,  FALSE, TRUE, FALSE, TRUE, FALSE,
TRUE, FALSE,FALSE, FALSE, TRUE, FALSE, FALSE,
TRUE, FALSE, TRUE))
tabla <- table(datos$sujeto, datos$mutacion, dnn = c("Sujeto", "Estado gen"))
fisher.test(x = tabla, alternative = "two.sided")
library(vcd)
install.packages("vcd")
library(vcd)
assocstats(x = tabla)
knitr::include_graphics('test_chi-cuadrado.PNG')
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
df <- tribble(
~renta, ~bueno, ~malo, ~regular,
'Bajo', 75,40,35,
'Medio', 60,50,70,
'Alto', 20,40,30,
'Muy Alto', 15,40,25)
df <- df %>% column_to_rownames(var = 'renta')
# Para graficarlo con % fila (perifles fila)
df_prop = prop.table(as.matrix(df),margin=1)
df_prop
# Para graficarlo con % columna (perifles fila)
df_prop = prop.table(as.matrix(df),margin=2)
df_prop
prueba <- chisq.test(df)
prueba
qchisq(0.95,6)
library('FactoMineR')
knitr::opts_chunk$set(echo = T, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
knitr::include_graphics('inercia_ppio_equivalencia_distribucional.png')
source("Unidad0_repos_and_tools.R")
zonas <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/zonas.xlsx")
source("Unidad0_repos_and_tools.R")
zonas <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/zonas.xlsx")
setwd("~/research_tools/utn_analisis_inteligente_datos")
source("Unidad0_repos_and_tools.R")
zonas <- readxl::read_excel("~/research_tools/utn_analisis_inteligente_datos/zonas.xlsx")
