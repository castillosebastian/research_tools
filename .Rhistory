x
hist(x, proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
x
x <- as.numeric(temp[datosQ[[{{variable_factor_qda}}]] == i0, j0])
x
hist(x, proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
hist(x$Length, proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
hist(x[[1]], proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
par(mfcol = c(l, dim(temp)[2]))
for (k in 1:dim(temp)[2]) {
j0 <- names(temp)[k]
x0 <- seq(min(temp[, k]), max(temp[, k]), le = 50)
for (i in 1:l) {
i0 <- levels(datosQ[[{{variable_factor_qda}}]])[i]
x <- temp[datosQ[[{{variable_factor_qda}}]] == i0, j0]
hist(x[[1]], proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
for (k in 2:7) {
j0 <- names(banknote)[k]
x0 <- seq(min(banknote[, k]), max(banknote[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(banknote$Status)[i]
x <- banknote[banknote$Status == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste( i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
par(mfcol = c(l, dim(temp)[2]))
for (k in 2:7) {
j0 <- names(banknote)[k]
x0 <- seq(min(banknote[, k]), max(banknote[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(banknote$Status)[i]
x <- banknote[banknote$Status == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste( i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
for (k in 2:7) {
j0 <- names(banknote)[k]
x0 <- seq(min(banknote[, k]), max(banknote[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(banknote$Status)[i]
x <- banknote[banknote$Status == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste( i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
par(mfcol = c(l, dim(temp)[2]))
# for (k in 1:dim(temp)[2]) {
#   j0 <- names(temp)[k]
#   x0 <- seq(min(temp[, k]), max(temp[, k]), le = 50)
#   for (i in 1:l) {
#     i0 <- levels(datosQ[[{{variable_factor_qda}}]])[i]
#     x <- temp[datosQ[[{{variable_factor_qda}}]] == i0, j0]
#     hist(x, proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
#     lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
#   }
# }
for (k in 2:7) {
j0 <- names(banknote)[k]
x0 <- seq(min(banknote[, k]), max(banknote[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(banknote$Status)[i]
x <- banknote[banknote$Status == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste( i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
par(mfcol = c(l, 4))
# for (k in 1:dim(temp)[2]) {
#   j0 <- names(temp)[k]
#   x0 <- seq(min(temp[, k]), max(temp[, k]), le = 50)
#   for (i in 1:l) {
#     i0 <- levels(datosQ[[{{variable_factor_qda}}]])[i]
#     x <- temp[datosQ[[{{variable_factor_qda}}]] == i0, j0]
#     hist(x, proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
#     lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
#   }
# }
for (k in 2:7) {
j0 <- names(banknote)[k]
x0 <- seq(min(banknote[, k]), max(banknote[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(banknote$Status)[i]
x <- banknote[banknote$Status == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste( i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
par(mfcol = c(l, 4))
for (k in 1:dim(temp)[2]) {
j0 <- names(temp)[k]
x0 <- seq(min(temp[, k]), max(temp[, k]), le = 50)
for (i in 1:l) {
i0 <- levels(datosQ[[{{variable_factor_qda}}]])[i]
x <- temp[datosQ[[{{variable_factor_qda}}]] == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste(variable_factor_qda, i0),  xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
datosQ_tidy <- melt(datosQ, value.name = "valor")
datosQ_tidy_test <- datosQ_tidy %>% group_by(datosQ_tidy[[{{variable_factor_qda}}]], variable) %>% summarise(p_value_Shapiro.test = round(shapiro.test(valor)$p.value, digits = 5))
kableExtra::kable(datosQ_tidy_test)
if(any(datosQ_tidy_test$p_value_Shapiro.test < 0.05)){'H0 debe rechazarse: hay evidencia de falta de normalidad en los siguientes casos'} else {'No hay evidencia de falta de normalidad univariante en ninguna variable predictora por grupo'}
datosQ_tidy_test[datosQ_tidy_test$p_value_Shapiro.test < 0.05, ]
outliers <- mvn(data =temp, mvnTest = "hz", multivariateOutlierMethod = "quan")
outliers <- mvn(data = temp, mvnTest = "hz", multivariateOutlierMethod = "quan")
temp
outliers <- MVN::mvn(data = temp, mvnTest = "hz", multivariateOutlierMethod = "quan")
royston_test <- mvn(data = temp, mvnTest = "royston", multivariatePlot = "qq")
royston_test <- MVN::mvn(data = temp, mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
# N tiene que ser > 3 y < a 5000
if(any(royston_test$multivariateNormality$MVN == "NO")){'H0 debe rechazarse: falta de normalidad multivariante a nivel de significancia 0.05'} else {'No hay evidencia de falta de normalidad multivariante a nivel de significancia 0.05'}
hz_test <- MVN::mvn(data = temp, mvnTest = "hz")
hz_test$multivariateNormality
if(any(hz_test$multivariateNormality$MVN == "NO")){'H0 debe rechazarse: falta de normalidad multivariante a nivel de significancia 0.05'} else {'No hay evidencia de falta de normalidad multivariante a nivel de significancia 0.05 '}
library(biotools)
boxmtest =  boxM(data = temp, grouping = datosQ[, variable_factor_qda])
atosQ[, variable_factor_qda]
datosQ[, variable_factor_qda]
library(biotools)
boxmtest =  biotools::boxM(data = temp, grouping = datosQ[, variable_factor_qda])
temp
boxM(data = banknote[, -1], grouping = banknote[, 1])
library(biotools)
boxmtest =  biotools::boxM(data = temp, grouping = datosQ[, variable_factor_qda])
if(boxmtest$p.value < 0.05){'H0 debe rechazarse: hay evidencia de que la covarianza no es igual en todos los grupos'} else {'Se puede aceptar que la matriz de covarianza es igual en todos los grupos'}
modelo_lda <- lda(temp, datosQ[[{{variable_factor_qda}}]])
modelo_lda
predicciones <- predict(object = modelo_lda, newdata = temp, method = "predictive")
table(datosQ[[{{variable_factor_qda}}]], predicciones$class,
dnn = c("Clase real", "Clase predicha"))
trainig_error <- mean(datosQ[[{{variable_factor_qda}}]] != predicciones$class) * 100
paste("trainig_error =", trainig_error, "%")
partimat(temp, datosQ[[{{variable_factor_qda}}]], method = "lda", prec = 200)
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
knitr::opts_chunk$set(echo = F, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# bibliograf
# https://bookdown.org/steve_midway/DAR/understanding-anova-in-r.html _______IMPORTANTE_________
# https://rpubs.com/Miguel_Tripp/anova
# https://www.cienciadedatos.net/documentos/19_anova.html
# https://www.cienciadedatos.net/documentos/9_homogeneidad_de_varianza_homocedasticidad.html
#https://fhernanb.github.io/Manual-de-R/ph.html#prueba-de-hip%C3%B3tesis-para-la-varianza-sigma2-de-una-poblaci%C3%B3n-normal
library(biotools)
boxmtest =  biotools::boxM(data = temp, grouping = datosQ[, variable_factor_qda])
library(mclust)
datosQ = as_tibble(mclust::banknote)
#se recodifican las clases de la variable Status: verdadero = 0, falso = 1
# factorizo variable factor
datosQ[[{{variable_factor_qda}}]] = as.factor(datosQ[[{{variable_factor_qda}}]])
variable_factor_qda = "Status"
library(mclust)
datosQ = as_tibble(mclust::banknote)
#se recodifican las clases de la variable Status: verdadero = 0, falso = 1
# factorizo variable factor
datosQ[[{{variable_factor_qda}}]] = as.factor(datosQ[[{{variable_factor_qda}}]])
# resumente datos
str(datosQ)
temp <- datosQ %>% dplyr::select(!{{variable_factor_qda}})
l <- length(unique(datosQ[[{{variable_factor_qda}}]]))
status
temp
pairs(x =temp, col =datosQ[[{{variable_factor_qda}}]], oma=c(3,3,3,15))
par(xpd = TRUE)
legend("bottomright", fill = unique(datosQ[[{{variable_factor_qda}}]]), legend = c(levels(datosQ[[{{variable_factor_qda}}]])))
datosQ_tidy <- melt(datosQ, value.name = "valor")
datosQ_tidy_test <- datosQ_tidy %>% group_by(datosQ_tidy[[{{variable_factor_qda}}]], variable) %>% summarise(p_value_Shapiro.test = round(shapiro.test(valor)$p.value, digits = 5))
kableExtra::kable(datosQ_tidy_test)
if(any(datosQ_tidy_test$p_value_Shapiro.test < 0.05)){'H0 debe rechazarse: hay evidencia de falta de normalidad en los siguientes casos'} else {'No hay evidencia de falta de normalidad univariante en ninguna variable predictora por grupo'}
datosQ_tidy_test[datosQ_tidy_test$p_value_Shapiro.test < 0.05, ]
outliers <- MVN::mvn(data = temp, mvnTest = "hz", multivariateOutlierMethod = "quan")
royston_test <- MVN::mvn(data = temp, mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
if(any(datosQ_tidy_test$p_value_Shapiro.test < 0.05)){'H0 debe rechazarse: hay evidencia de falta de normalidad en los siguientes casos'} else {'No hay evidencia de falta de normalidad univariante en ninguna variable predictora por grupo'}
datosQ_tidy_test[datosQ_tidy_test$p_value_Shapiro.test < 0.05, ]
# N tiene que ser > 3 y < a 5000
if(any(royston_test$multivariateNormality$MVN == "NO")){'H0 debe rechazarse: falta de normalidad multivariante a nivel de significancia 0.05'} else {'No hay evidencia de falta de normalidad multivariante a nivel de significancia 0.05'}
hz_test <- MVN::mvn(data = temp, mvnTest = "hz")
hz_test$multivariateNormality
if(any(hz_test$multivariateNormality$MVN == "NO")){'H0 debe rechazarse: falta de normalidad multivariante a nivel de significancia 0.05'} else {'No hay evidencia de falta de normalidad multivariante a nivel de significancia 0.05 '}
library(biotools)
boxmtest =  biotools::boxM(data = temp, grouping = datosQ[, variable_factor_qda])
boxM(data = datosQ[, -1], grouping = datosQ[, 1])
library(biotools)
boxmtest =  biotools::boxM(data = temp, grouping = datosQ[[{{variable_factor_qda}}]])
boxmtest
if(boxmtest$p.value < 0.05){'H0 debe rechazarse: hay evidencia de que la covarianza no es igual en todos los grupos'} else {'Se puede aceptar que la matriz de covarianza es igual en todos los grupos'}
input <- ("
especie pata abdomen organo_sexual
a 191 131 53
a 185 134 50
a 200 137 52
a 173 127 50
a 171 128 49
a 160 118 47
a 188 134 54
a 186 129 51
a 174 131 52
a 163 115 47
b 186 107 49
b 211 122 49
b 201 144 47
b 242 131 54
b 184 108 43
b 211 118 51
b 217 122 49
b 223 127 51
b 208 125 50
b 199 124 46
")
datos <- read.table(textConnection(input), header = TRUE)
#datos = iris
# factorizo variable factor
datos[[{{variable_factor_lda}}]] = as.factor(datos[[{{variable_factor_lda}}]])
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
modelo_lda <- qda(temp, datosQ[[{{variable_factor_qda}}]])
temp
valores_qda_nvaobs = c(215, 130, 130, 9, 10, 140)
columnas = colnames(temp)
nueva_observacion <- rbind(columnas, valores_qda_nvaobs)
nueva_observacion <- nueva_observacion %>%
janitor::row_to_names(row_number = 1)
nueva_observacion <- nueva_observacion %>% as_tibble() %>% mutate_if(is.character, as.numeric)
predict(object = modelo_lda, newdata = nueva_observacion)
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
columnas = colnames(temp)
nueva_observacion <- rbind(columnas, valores_qda_nvaobs)
nueva_observacion <- nueva_observacion %>%
janitor::row_to_names(row_number = 1)
nueva_observacion <- nueva_observacion %>% as_tibble() %>% mutate_if(is.character, as.numeric)
predict(object = modelo_qda, newdata = nueva_observacion)
modelo_qda <- qda(temp, datosQ[[{{variable_factor_qda}}]])
modelo_qda
columnas = colnames(temp)
nueva_observacion <- rbind(columnas, valores_qda_nvaobs)
nueva_observacion <- nueva_observacion %>%
janitor::row_to_names(row_number = 1)
nueva_observacion <- nueva_observacion %>% as_tibble() %>% mutate_if(is.character, as.numeric)
predict(object = modelo_qda, newdata = nueva_observacion)
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
predicciones <- predict(object = modelo_qda, newdata = temp, method = "predictive")
table(datosQ[[{{variable_factor_qda}}]], predicciones$class,
dnn = c("Clase real", "Clase predicha"))
trainig_error <- mean(datosQ[[{{variable_factor_qda}}]] != predicciones$class) * 100
paste("trainig_error =", trainig_error, "%")
partimat(temp, datosQ[[{{variable_factor_qda}}]], method = "lda", prec = 200)
partimat(temp, datosQ[[{{variable_factor_qda}}]], method = "qda", prec = 200)
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
knit_with_parameters('~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd')
p = nextprime(77777)
while 1:
print(p)  # or do what you need to do
p = nextprime(p)
p = nextprime(77777)
library(numbers)
install.packages("numbers")
library(numbers)
Primes(77777,88888)
Primes(777777,777999)
install.packages("installr")
library(installr)
updateR()
library(knitr)
library(stringr)
library(janitor)
library(kableExtra)
library(tidyr)
library(tibble)
library(ggplot2)
library(ggbeeswarm)
library(RColorBrewer)
library(colorRamps)
library(lubridate)
library(scales)
library(gghighlight)
library(rlang)
library(ggthemes)
library(readr)
install.packages("readr")
install.packages("hms")
install.packages("readr")
install.packages("tzdb")
install.packages("readr", dependencies = T)
install.packages("gghighlight", dependencies = T)
library(knitr)
library(stringr)
library(janitor)
library(kableExtra)
library(tidyr)
library(tibble)
library(ggplot2)
library(ggbeeswarm)
library(RColorBrewer)
library(colorRamps)
library(lubridate)
library(scales)
library(gghighlight)
library(rlang)
library(ggthemes)
library(readr) # aca actualizar
library(tibbletime)
library(formattable)
library(jsonlite)
library(skimr)
install.packages("formattable")
library(formattable)
library(jsonlite)
library(skimr)
#library(cvequality)
#library(raster)
library(corrplot)
install.packages("skimr")
library(corrplot)
library(moments)
library(htmltools)
#library(DataExplorer)
#library(matlib)
library(MASS)
library(broom)
library(FactoMineR)#
install.packages("FactoMineR")
install.packages("boot")
install.packages("FactoMineR", dependencies = T)
library(factoextra)
install.packages("factoextra", dependencies = T)
library(vcd)
library(gplots)
library(nortest)
library(reshape2)
library(dplyr)
library(MVN)
install.packages("MVN", dependencies = T)
library(klaR)
install.packages("klaR")
install.packages("labelled")
install.packages("haven")
install.packages("klaR", dependencies = T)
install.packages("labelled")
install.packages("haven")
install.packages("forcats")
install.packages("klaR")
install.packages("haven")
install.packages("klaR")
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
install.packages("tibbletime", dependencies = T)
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
library(biotools)
install.packages("biotools")
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
install.packages("tinytex")
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
library(IRkernel)
IRkernel::installspec()
jupyter notebook
knitr::opts_chunk$set(echo = F, warning = F, message = F)
source("Unidad0_repos_and_tools.R")
# bibliograf
# https://bookdown.org/steve_midway/DAR/understanding-anova-in-r.html _______IMPORTANTE_________
# https://rpubs.com/Miguel_Tripp/anova
# https://www.cienciadedatos.net/documentos/19_anova.html
# https://www.cienciadedatos.net/documentos/9_homogeneidad_de_varianza_homocedasticidad.html
#https://fhernanb.github.io/Manual-de-R/ph.html#prueba-de-hip%C3%B3tesis-para-la-varianza-sigma2-de-una-poblaci%C3%B3n-normal
subject <- as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
sex <- c("female", "male", "male", "female", "male", "male", "male", "female",
"female", "male", "male", "male", "male", "female", "female", "female",
"male", "female", "female", "male", "male", "female", "male", "male",
"male", "male", "male", "male", "female", "male" )
age <- c("adult", "adult", "adult", "adult", "adult", "adult", "young", "young",
"adult", "young", "young", "adult", "young", "young", "young", "adult",
"young", "adult", "young", "young", "young", "young", "adult", "young",
"young", "young", "young", "young", "young", "adult")
result <- c(7.1, 11.0, 5.8, 8.8, 8.6, 8.0, 3.0, 5.2, 3.4, 4.0, 5.3, 11.3, 4.6, 6.4,
13.5, 4.7, 5.1, 7.3, 9.5, 5.4, 3.7, 6.2, 10.0, 1.7, 2.9, 3.2, 4.7, 4.9,
9.8, 9.4)
datos <- data.frame(subject, sex, age, result)
head(datos, 4)
variable_factor_anovam = "result"
subject <- as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
sex <- c("female", "male", "male", "female", "male", "male", "male", "female",
"female", "male", "male", "male", "male", "female", "female", "female",
"male", "female", "female", "male", "male", "female", "male", "male",
"male", "male", "male", "male", "female", "male" )
age <- c("adult", "adult", "adult", "adult", "adult", "adult", "young", "young",
"adult", "young", "young", "adult", "young", "young", "young", "adult",
"young", "adult", "young", "young", "young", "young", "adult", "young",
"young", "young", "young", "young", "young", "adult")
result <- c(7.1, 11.0, 5.8, 8.8, 8.6, 8.0, 3.0, 5.2, 3.4, 4.0, 5.3, 11.3, 4.6, 6.4,
13.5, 4.7, 5.1, 7.3, 9.5, 5.4, 3.7, 6.2, 10.0, 1.7, 2.9, 3.2, 4.7, 4.9,
9.8, 9.4)
datos <- data.frame(subject, sex, age, result)
datos[[{{variable_factor_anovam}}]] = as.factor(datos[[{{variable_factor_anovam}}]])
head(datos, 4)
# subject <- as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
#                        18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
sex <- c("female", "male", "male", "female", "male", "male", "male", "female",
"female", "male", "male", "male", "male", "female", "female", "female",
"male", "female", "female", "male", "male", "female", "male", "male",
"male", "male", "male", "male", "female", "male" )
age <- c("adult", "adult", "adult", "adult", "adult", "adult", "young", "young",
"adult", "young", "young", "adult", "young", "young", "young", "adult",
"young", "adult", "young", "young", "young", "young", "adult", "young",
"young", "young", "young", "young", "young", "adult")
result <- c(7.1, 11.0, 5.8, 8.8, 8.6, 8.0, 3.0, 5.2, 3.4, 4.0, 5.3, 11.3, 4.6, 6.4,
13.5, 4.7, 5.1, 7.3, 9.5, 5.4, 3.7, 6.2, 10.0, 1.7, 2.9, 3.2, 4.7, 4.9,
9.8, 9.4)
datos <- data.frame(#subject,
sex, age, result)
datos[[{{variable_factor_anovam}}]] = as.factor(datos[[{{variable_factor_anovam}}]])
head(datos, 4)
#code to create a boxplot of the lizard data
temp <- datos %>% select(!{{variable_factor_anovam}})
boxplot(datos[[{{variable_factor_anovam}}]],
temp)
boxplot(variable_factor_anovam~sex*age, data=datos)
ggplot(data = datos, mapping = aes(x = age, y = result, colour = sex)) +
geom_boxplot() +
theme_bw()
# subject <- as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
#                        18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
sex <- c("female", "male", "male", "female", "male", "male", "male", "female",
"female", "male", "male", "male", "male", "female", "female", "female",
"male", "female", "female", "male", "male", "female", "male", "male",
"male", "male", "male", "male", "female", "male" )
age <- c("adult", "adult", "adult", "adult", "adult", "adult", "young", "young",
"adult", "young", "young", "adult", "young", "young", "young", "adult",
"young", "adult", "young", "young", "young", "young", "adult", "young",
"young", "young", "young", "young", "young", "adult")
result <- c(7.1, 11.0, 5.8, 8.8, 8.6, 8.0, 3.0, 5.2, 3.4, 4.0, 5.3, 11.3, 4.6, 6.4,
13.5, 4.7, 5.1, 7.3, 9.5, 5.4, 3.7, 6.2, 10.0, 1.7, 2.9, 3.2, 4.7, 4.9,
9.8, 9.4)
datos <- data.frame(#subject,
sex, age, result)
datos[[{{variable_factor_anovam}}]] = as.integer(datos[[{{variable_factor_anovam}}]])
head(datos, 4)
ggplot(data = datos, mapping = aes(x = age, y = result, colour = sex)) +
geom_boxplot() +
theme_bw()
anova_2vias <- aov(formula = result ~ sex*age, data = datos)
summary(anova_2vias)
options(scipen = 999) # inhabilito notacion científica
anova_2vias <- aov(formula = result ~ sex*age, data = datos)
summary(anova_2vias)
etaSquared(anova_2vias)
library(lsr)
install.packages("lsr")
lsr::etaSquared(anova_2vias)
anova_2vias$coefficients
anova_2vias <- aov(formula = result ~ sex*age, data = datos)
s = summary(anova_2vias)
s
View(s)
s[[1]][["Pr(>F)"]]
s[[1]][["Df"]]
s
s[[1]]
s[[1]]$Df[1]
if(any(s[[1]][["Pr(>F)"]] < 0.05)){'H0 debe rechazarse: hay evidencia de falta de normalidad en los siguientes casos'} else {'No hay evidencia de falta de normalidad univariante en ninguna variable predictora por grupo'}
lsr::etaSquared(anova_2vias)
if(any(s[[1]][["Pr(>F)"]] < 0.05)){'La varianza presenta diferencias significativas entre los grupos'} else {'La varianza no presenta diferencia significativa entre los grupos'}
lsr::etaSquared(anova_2vias)
lsr::etaSquared(anova_2vias, anova = T)
efecto = lsr::etaSquared(anova_2vias)
efecto
efecto[1]
View(efecto)
efecto = lsr::etaSquared(anova_2vias)
efecto[efecto[1] < 0.05, ]
efecto = lsr::etaSquared(anova_2vias)
efecto[efecto[[1]] < 0.05, ]
efecto[1]
efecto[1, ]
efecto[,1]
efecto = as_tibble(lsr::etaSquared(anova_2vias))
efecto
efecto = lsr::etaSquared(anova_2vias)
names(efecto)
rownames(efecto)
efecto[,1]
efecto[,1] >= 0.14
rownames(efecto)[efecto[,1] >= 0.14]
efecto_grande = rownames(efecto)[efecto[,1] >= 0.14]
if(!is.na(efecto_grande)){str_c('efecto grande en:', efecto_grande)} else {'No hay efecto grande'}
efecto_grande
length(efecto_grande)
efecto_grande = rownames(efecto)[efecto[,1] >= 0.14]
if(length(efecto_grande) >=1){str_c('efecto grande en:', efecto_grande)} else {'No hay efecto grande'}
efecto_medio = rownames(efecto)[efecto[,1] >= 0.06 & efecto[,1] < 0.14 ]
if(length(efecto_grande) >=1){str_c('efecto medio en:', efecto_medio)} else {'No hay efecto medio'}
efecto_medio = rownames(efecto)[efecto[,1] >= 0.06 & efecto[,1] < 0.14 ]
if(length(efecto_medio) >=1){str_c('efecto medio en:', efecto_medio)} else {'No hay efecto medio'}
efecto_grande = rownames(efecto)[efecto[,1] >= 0.14]
if(length(efecto_grande) >=1){str_c('efecto grande en:', efecto_grande)} else {'No hay efecto grande'}
efecto_medio = rownames(efecto)[efecto[,1] >= 0.06 & efecto[,1] < 0.14 ]
if(length(efecto_medio) >=1){str_c('efecto medio en:', efecto_medio)} else {'No hay efecto medio'}
efecto_grande = rownames(efecto)[efecto[,1] >= 0.14]
if(length(efecto_grande) >=1){str_c('efecto grande en:', efecto_grande)} else {'No hay efecto grande'}
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
knit_with_parameters("~/R/research_tools/utn_analisis_inteligente_datos/toolsegundoparcial.Rmd")
par(mfrow = c(1,2))
plot(anova_2vias)
